{"version":3,"sources":["Timer.js","App.js","reportWebVitals.js","index.js"],"names":["Timer","useStopwatch","autoStart","seconds","minutes","start","hours","days","isRunning","pause","nf","reset","number","className","InputGroup","size","Text","id","FormControl","Button","onClick","variant","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"wPAQe,SAASA,IACpB,MASIC,uBAAa,CAAEC,WAAW,IAR1BC,EADJ,EACIA,QACAC,EAFJ,EAEIA,QAIAC,GANJ,EAGIC,MAHJ,EAIIC,KAJJ,EAKIC,UALJ,EAMIH,OACAI,EAPJ,EAOIA,MAIEC,GAXN,EAQIC,MAGO,SAACC,GAAD,OAAYA,GAAU,GAAKA,EAAS,IAAIA,IAEnD,OACI,qBAAKC,UAAU,MAAf,SACI,yBAAQA,UAAU,aAAlB,UACI,eAACC,EAAA,EAAD,CAAYC,KAAK,KAAKF,UAAU,OAAhC,UACI,cAACC,EAAA,EAAWE,KAAZ,CAAiBC,GAAG,uBAApB,wBACA,cAACC,EAAA,EAAD,CAAa,aAAW,QAAQ,mBAAiB,4BAGrD,eAACJ,EAAA,EAAD,CAAYC,KAAK,KAAKF,UAAU,OAAhC,UACI,cAACC,EAAA,EAAWE,KAAZ,CAAiBC,GAAG,uBAApB,sBACA,cAACC,EAAA,EAAD,CAAa,aAAW,QAAQ,mBAAiB,4BAGrD,+BAAM,+BAAKR,EAAGN,GAAR,IAAmBM,EAAGP,QAC5B,iCACI,cAACgB,EAAA,EAAD,CAAQC,QAASf,EAAOgB,QAAQ,UAAhC,mBACA,cAACF,EAAA,EAAD,CAAQC,QAASX,EAAOY,QAAQ,UAAhC,0BCjCL,SAASC,IACpB,OACE,8BACE,cAACtB,EAAD,MCRR,IAYeuB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCAdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.b2ef2a4b.chunk.js","sourcesContent":["import { useState } from 'react';\nimport './App.css';\nimport React from 'react';\nimport { useStopwatch } from 'react-timer-hook';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport {Button, InputGroup, FormControl} from 'react-bootstrap';\n\n//Build with: INLINE_RUNTIME_CHUNK=false npm run build\nexport default function Timer() {\n    const {\n        seconds,\n        minutes,\n        hours,\n        days,\n        isRunning,\n        start,\n        pause,\n        reset,\n    } = useStopwatch({ autoStart: false });\n\n    const nf = (number) => number >= 10 ? number : \"0\"+number\n\n    return (\n        <div className=\"App\">\n            <header className=\"App-header\">\n                <InputGroup size=\"sm\" className=\"mb-3\">\n                    <InputGroup.Text id=\"inputGroup-sizing-sm\">Start Link</InputGroup.Text>\n                    <FormControl aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" />\n                </InputGroup>\n\n                <InputGroup size=\"sm\" className=\"mb-3\">\n                    <InputGroup.Text id=\"inputGroup-sizing-sm\">End Link</InputGroup.Text>\n                    <FormControl aria-label=\"Small\" aria-describedby=\"inputGroup-sizing-sm\" />\n                </InputGroup>\n\n                <span><h2>{nf(minutes)}:{nf(seconds)}</h2></span>\n                <span>\n                    <Button onClick={start} variant=\"primary\">Start</Button>\n                    <Button onClick={pause} variant=\"primary\">Stop</Button>\n                </span>\n                \n            </header>\n        </div>\n    );\n}","import './App.css';\nimport React from 'react';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Timer from './Timer';\n\nexport default function App() {\n    return (\n      <div>\n        <Timer />\n      </div>\n    );\n}\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}